/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION aspects::xpt::diagram::updater::DescriptorsGenApi»
«EXTENSION xpt::async::NonCanonicalDiagram»

«AROUND collectAllLinks FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection collectAllLinks(org.eclipse.gmf.runtime.notation.View view, Domain2Notation domain2NotationMap) { 
	if («EXPAND aspects::xpt::editor::VisualIDRegistry::isShortcutDescendantMethodCall»(view)) {
		return collectLinksOutgoingFromShortcut(view, domain2NotationMap); «REM» the diff is here (in addition to Map -> Domain2Notation) «ENDREM»
	}
	java.util.Collection result = new java.util.LinkedList();
	switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view)) {
		«EXPAND xpt::diagram::editpolicies::DiagramCanonicalEditPolicy::caseSemanticElement FOREACH getAllSemanticElements(self)-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	return result;
}
«ENDAROUND»

«AROUND caseSemanticElement FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
	if (!domain2NotationMap.containsKey(view.getElement())) {
«REM»
	Processing each domain element only once. Prevents us from 
	having duplicated links if a shortcut to one of the "main"
	diagram elements present on diagram.
«ENDREM»«-»
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
«REM»
	The difference for this around is here - Domain2Notation is to collect ALL views for given semantic element
«ENDREM»«-»
	domain2NotationMap.put(view.getElement(), view);
	break;	
}
«ENDAROUND»

«AROUND createConnections FOR gmfgen::GenDiagram-»
	«REM» There are 2 difference here : 
	       1. Map -> Domain2Notation
	       2. getEditPart(EObject, ...) -> getSourceEditPart(LinkDescriptor, ...) / getTargetEditPart(LinkDescriptor, ...)
	«ENDREM»«-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection createConnections(java.util.Collection linkDescriptors, Domain2Notation domain2NotationMap) { «REM» The difference is here : Map -> Domain2Notation «ENDREM»
	java.util.List adapters = new java.util.LinkedList();
	for (java.util.Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
		final «getGenApiLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («getGenApiLinkDescriptorQualifiedClassName()») linkDescriptorsIterator.next();
		org.eclipse.gef.EditPart sourceEditPart = getSourceEditPart(nextLinkDescriptor, domain2NotationMap); «REM» sic! «ENDREM»
		org.eclipse.gef.EditPart targetEditPart = getTargetEditPart(nextLinkDescriptor, domain2NotationMap); «REM» sic! «ENDREM»
		if (sourceEditPart == null || targetEditPart == null) {
			continue;
		}
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(«-»
			nextLinkDescriptor.getSemanticAdapter(), «-» 
			«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('nextLinkDescriptor.getVisualID()')», «-»
			org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, «-» 
			false, «-»
			((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(descriptor);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sourceEditPart);
		sourceEditPart.getCommand(ccr);
		ccr.setTargetEditPart(targetEditPart);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = targetEditPart.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable viewAdapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			if (viewAdapter != null) {
				adapters.add(viewAdapter);
			}
		}
	}
	return adapters;
}
«ENDAROUND»

«AROUND getEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getEditPart(org.eclipse.emf.ecore.EObject domainModelElement, Domain2Notation domain2NotationMap) { «REM» Map -> Domain2Notation «ENDREM»
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.get(domainModelElement);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}

«REM» sic! «ENDREM»«-»
«EXPAND getSourceEditPart»
«EXPAND getTargetEditPart»
«EXPAND getHintedEditPart»

«ENDAROUND»

«DEFINE getHintedEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected final org.eclipse.gef.EditPart getHintedEditPart(org.eclipse.emf.ecore.EObject domainModelElement, Domain2Notation domain2NotationMap, int hintVisualId) { 
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.getHinted(domainModelElement, «-»
											«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('hintVisualId')»);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSourceEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getSourceEditPart(«getGenApiLinkDescriptorQualifiedClassName()» descriptor, Domain2Notation domain2NotationMap) { 
	return getEditPart(descriptor.getSource(), domain2NotationMap);
}
«ENDDEFINE»

«DEFINE getTargetEditPart FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getTargetEditPart(«getGenApiLinkDescriptorQualifiedClassName()» descriptor, Domain2Notation domain2NotationMap) { 
	return getEditPart(descriptor.getDestination(), domain2NotationMap);
}
«ENDDEFINE»

«AROUND refreshConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection refreshConnections() {
	Domain2Notation  domain2NotationMap = new Domain2Notation(); «REM» The only change in this around : Map -> Domain2Notation «ENDREM»
	java.util.Collection linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
	java.util.Collection existingLinks = new java.util.LinkedList(getDiagram().getEdges());
	for (java.util.Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge nextDiagramLink = (org.eclipse.gmf.runtime.notation.Edge) linksIterator.next();
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
		if (diagramLinkVisualID == -1) {
			if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
				linksIterator.remove();
			}
			continue;
		}
		//don't remove notation-only links 
		if (isNotationOnlyEdge(nextDiagramLink)){
			linksIterator.remove();
			continue;
		}
		org.eclipse.emf.ecore.EObject diagramLinkObject = nextDiagramLink.getElement();
		org.eclipse.emf.ecore.EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
		org.eclipse.emf.ecore.EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
		boolean existingLinkRemoved = false;
		for (java.util.Iterator LinkDescriptorsIterator = linkDescriptors.iterator(); LinkDescriptorsIterator.hasNext();) {
			«getGenApiLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («getGenApiLinkDescriptorQualifiedClassName()») LinkDescriptorsIterator.next();
			if (diagramLinkObject == nextLinkDescriptor.getModelElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
				if (!existingLinkRemoved){
					linksIterator.remove();
					existingLinkRemoved = true;
				}
				LinkDescriptorsIterator.remove();
			}
		}
	}
	deleteViews(existingLinks.iterator());
	return createConnections(linkDescriptors, domain2NotationMap);
}
«ENDAROUND»

«AROUND refreshSemantic FOR gmfgen::GenDiagram-»
«IF not supportsNonCanonicalMode(self)-»
	«targetDef.proceed()-»
«ELSE-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshSemantic() {
		java.util.List createdViews = new java.util.LinkedList();
		if (myCanonicalHelper.shouldSyncNodes(getNotationView())){		
			createdViews.addAll(refreshSemanticChildren());
		}
		java.util.List createdConnectionViews = new java.util.LinkedList();
		if (myCanonicalHelper.shouldSyncLinks(getNotationView())){
			createdConnectionViews.addAll(refreshSemanticConnections());
			«IF not links->isEmpty()-»
			createdConnectionViews.addAll(refreshConnections());
			«ENDIF-»
		}
		
		if (createdViews.size() > 1) {
			// perform a layout of the container
			org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
			executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
		}
	
		createdViews.addAll(createdConnectionViews);
		makeViewsImmutable(createdViews);
	}
«ENDIF-»
«ENDAROUND»

«AROUND xpt::diagram::editpolicies::DiagramCanonicalEditPolicy::additions FOR gmfgen::GenDiagram»
	«EXPAND isNotationOnlyEdge»
	
	«EXPAND collectLinksOutgoingFromShortcut»
	
	«EXPAND DomainToNotationClass»
	
	«IF supportsNonCanonicalMode(self)-»
	«EXPAND getNotationView»
	
	«EXPAND myCanonicalHelper»
	«ENDIF-»
	
	«EXPAND aspects::xpt::diagram::updater::containerBaseCanonicalMethods::getFactoryHint»

«ENDAROUND»

«DEFINE isNotationOnlyEdge FOR gmfgen::GenDiagram»
    «EXPAND xpt::Common::generatedMemberComment»
    private boolean isNotationOnlyEdge(org.eclipse.gmf.runtime.notation.Edge edge){
    	return false;
    }
«ENDDEFINE»

«DEFINE DomainToNotationClass FOR gmfgen::GenDiagram»
    «EXPAND xpt::Common::generatedMemberComment»
	private static class Domain2Notation {
	    «EXPAND xpt::Common::generatedMemberComment»
		private final java.util.HashMap myMap = new java.util.HashMap();
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public boolean containsDomainElement(org.eclipse.emf.ecore.EObject domainElement){
			return myMap.containsKey(domainElement);
		}

	    «EXPAND xpt::Common::generatedMemberComment»
		public boolean containsKey(org.eclipse.emf.ecore.EObject domainElement){
			return containsDomainElement(domainElement);
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public void put(org.eclipse.emf.ecore.EObject domainElement, org.eclipse.gmf.runtime.notation.View view){
			Object viewOrList = myMap.get(domainElement);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				myMap.remove(domainElement);
				java.util.List<org.eclipse.gmf.runtime.notation.View> list = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
				list.add((org.eclipse.gmf.runtime.notation.View)viewOrList);
				myMap.put(domainElement, list);
				list.add(view);
			} else if (viewOrList instanceof java.util.List){
				((java.util.List)viewOrList).add(view);
			} else {
				myMap.put(domainElement, view);
			}
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gmf.runtime.notation.View get(org.eclipse.emf.ecore.EObject domainEObject){
			Object viewOrList = myMap.get(domainEObject);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				return (org.eclipse.gmf.runtime.notation.View)viewOrList;
			}
			if (viewOrList instanceof java.util.List){
				// preferring not-shortcut to shortcut -- important for cases when links arr to/from 
				// the element that is additionally shortcutted to the same diagram
				for (Object next : (java.util.List)viewOrList){
					org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
					if (nextView.getEAnnotation("Shortcut") == null) { «EXPAND xpt::Common::nonNLS»
						return nextView;
					}
				}
				return (org.eclipse.gmf.runtime.notation.View)((java.util.List)viewOrList).get(0);
			}
			return null;
		}
		
	    «EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gmf.runtime.notation.View getHinted(org.eclipse.emf.ecore.EObject domainEObject, String hint){
			if (hint == null){
				return get(domainEObject);
			}
			Object viewOrList = myMap.get(domainEObject);
			if (viewOrList instanceof org.eclipse.gmf.runtime.notation.View){
				//no choice, will return what we have
				return (org.eclipse.gmf.runtime.notation.View)viewOrList;
			}
			if (viewOrList instanceof java.util.List){ 
				for (Object next : (java.util.List)viewOrList){
					org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View)next;
					if (hint.equals(nextView.getType())){
						return nextView;
					}
				}
				//hint not found -- return what we have
				return (org.eclipse.gmf.runtime.notation.View)((java.util.List)viewOrList).get(0);
			}
			return null;
		}
	
	}

«ENDDEFINE»

«DEFINE collectLinksOutgoingFromShortcut FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment» 
	private java.util.Collection<«getGenApiLinkDescriptorQualifiedClassName()»> collectLinksOutgoingFromShortcut(org.eclipse.gmf.runtime.notation.View view, Domain2Notation domain2NotationMap) {
		org.eclipse.gef.EditPart ep = (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
		if (false == ep instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart){
			return Collections.emptyList();
		}
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart = (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)ep;
		org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest request = new org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest();
		//we are not using the result command -- each editpart from the tree 
		//is required to push data into the request
		editPart.getCommand(request);
		
		java.util.Set<«getGenApiLinkDescriptorQualifiedClassName()»> linksToFromShortcuts = new java.util.HashSet<«getGenApiLinkDescriptorQualifiedClassName()»>();
		for (org.eclipse.uml2.diagram.common.editpolicies.UpdateDescriptionRequest.Descriptor next : request.getDescriptions()){
			linksToFromShortcuts.addAll(next.getContainedLinks());
			linksToFromShortcuts.addAll(next.getOutgoingLinks());
			
			if (next.getSemanticElement() != null){
				domain2NotationMap.put(next.getSemanticElement(), next.getProvider().getNotationView());
			}
			
		}
		
		return linksToFromShortcuts;
	}

«ENDDEFINE»

«DEFINE getNotationView FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View getNotationView() {
		return (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	}
«ENDDEFINE»

«DEFINE myCanonicalHelper FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	private final org.eclipse.uml2.diagram.common.async.ICanonicalHelper myCanonicalHelper = org.eclipse.uml2.diagram.common.async.ICanonicalHelper.IMPLEMENTATION;
«ENDDEFINE»	